import { prisma } from '@/lib/db'
import fs from 'fs'
import path from 'path'
import jsPDF from 'jspdf'
import { extractDay, nowUTCDateOnly, formatDateBR } from '@/shared/utils/date'

export class GerarContratoUseCase {
  async execute(clienteId: string, dataContrato?: Date): Promise<{ contratoId: string; pdfUrl: string }> {
    console.log('üöÄ INICIO - Gera√ß√£o de contrato para cliente:', clienteId)
    
    try {
      // Valida√ß√£o b√°sica
      if (!clienteId || typeof clienteId !== 'string') {
        throw new Error(`ClienteId inv√°lido: ${clienteId}`)
      }

      // Validar data do contrato se fornecida
      if (dataContrato && dataContrato > new Date()) {
        throw new Error('A data do contrato n√£o pode ser futura')
      }

      // Buscar cliente
      console.log('üîç Buscando cliente...')
      const cliente = await prisma.cliente.findUnique({
        where: { id: clienteId },
        include: {
          produtos: {
            include: {
              produto: true
            }
          }
        }
      })

      if (!cliente) {
        throw new Error(`Cliente n√£o encontrado: ${clienteId}`)
      }
      console.log('‚úÖ Cliente encontrado:', cliente.nome)

      // Preparar diret√≥rio
      const uploadsDir = path.join(process.cwd(), 'public', 'contratos')
      if (!fs.existsSync(uploadsDir)) {
        fs.mkdirSync(uploadsDir, { recursive: true })
      }

      // Gerar PDF do contrato
      const fileName = `contrato_${clienteId}_${Date.now()}.pdf`
      const filePath = path.join(uploadsDir, fileName)
      
      await this.gerarContratoPDF(cliente, filePath, dataContrato)
      
      const fileUrl = `/contratos/${fileName}`
      console.log('‚úÖ Arquivo PDF salvo:', fileName)

      // Salvar no banco
      console.log('üíæ Salvando contrato no banco...')
      const contrato = await prisma.contrato.create({
        data: {
          cliente_id: clienteId,
          pdf_url: fileUrl,
          data_geracao: dataContrato || new Date(),
          metadata: {
            data_geracao: (dataContrato || new Date()).toISOString(),
            cliente_nome: cliente.nome,
            tipo: 'contrato_pdf'
          }
        }
      })

      console.log('üéâ Contrato gerado com sucesso:', contrato.id)
      return {
        contratoId: contrato.id,
        pdfUrl: contrato.pdf_url || ''
      }

    } catch (error) {
      console.error('üí• ERRO na gera√ß√£o do contrato:', error)
      throw error
    }
  }

  private async gerarContratoPDF(cliente: any, filePath: string, dataContrato?: Date): Promise<void> {
    try {
      // Criar documento PDF com jsPDF
      const doc = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4'
      })

      // Configura√ß√µes de margem
      const margin = 20
      const pageWidth = doc.internal.pageSize.getWidth()
      const pageHeight = doc.internal.pageSize.getHeight()
      const contentWidth = pageWidth - (margin * 2)
      
      let currentY = margin

      // Convers√£o de n√∫mero por extenso com suporte a milhares/milh√µes e centavos
      const numeroPorExtenso = (n: number): string => {
        n = Math.floor(Math.abs(n));
        if (n === 0) return 'zero';

        const unidades = ['', 'um', 'dois', 'tr√™s', 'quatro', 'cinco', 'seis', 'sete', 'oito', 'nove'];
        const especiais = ['dez', 'onze', 'doze', 'treze', 'quatorze', 'quinze', 'dezesseis', 'dezessete', 'dezoito', 'dezenove'];
        const dezenas = ['', '', 'vinte', 'trinta', 'quarenta', 'cinquenta', 'sessenta', 'setenta', 'oitenta', 'noventa'];
        const centenas = ['', 'cento', 'duzentos', 'trezentos', 'quatrocentos', 'quinhentos', 'seiscentos', 'setecentos', 'oitocentos', 'novecentos'];

        const centenaExtenso = (v: number): string => {
          if (v === 0) return '';
          if (v === 100) return 'cem';

          const c = Math.floor(v / 100);
          const r = v % 100;

          let parte = '';
          if (c > 0) parte = centenas[c];

          if (r >= 10 && r <= 19) {
            parte = parte ? `${parte} e ${especiais[r - 10]}` : especiais[r - 10];
          } else {
            const d = Math.floor(r / 10);
            const u = r % 10;

            if (d > 0) {
              parte = parte ? `${parte} e ${dezenas[d]}` : dezenas[d];
            }
            if (u > 0) {
              parte = parte ? `${parte} e ${unidades[u]}` : unidades[u];
            }
          }
          return parte;
        };

        const partes: string[] = [];

        const milhoes = Math.floor(n / 1_000_000);
        const restoMilhoes = n % 1_000_000;
        if (milhoes > 0) {
          partes.push(milhoes === 1 ? 'um milh√£o' : `${centenaExtenso(milhoes)} milh√µes`);
        }

        const milhares = Math.floor(restoMilhoes / 1000);
        const restoMilhares = restoMilhoes % 1000;
        if (milhares > 0) {
          if (milhares === 1) partes.push('mil');
          else partes.push(`${centenaExtenso(milhares)} mil`);
        }

        if (restoMilhares > 0) {
          partes.push(centenaExtenso(restoMilhares));
        }

        // Insere "e" antes do √∫ltimo bloco quando ele √© menor que 100 (uso mais natural)
        if (partes.length >= 2) {
          const ultimo = partes.pop()!;
          const penultimoValorMenorQueCem = (restoMilhares > 0 && restoMilhares < 100);
          const separador = penultimoValorMenorQueCem ? ' e ' : ' ';
          return `${partes.join(' ')}${separador}${ultimo}`.trim();
        }

        return partes[0] || 'zero';
      };

      const moedaPorExtenso = (valor: number): string => {
        const reais = Math.floor(valor);
        const centavos = Math.round((valor - reais) * 100);

        let texto = reais === 0
          ? 'zero reais'
          : `${numeroPorExtenso(reais)} ${reais === 1 ? 'real' : 'reais'}`;

        if (centavos > 0) {
          texto += ` e ${numeroPorExtenso(centavos)} ${centavos === 1 ? 'centavo' : 'centavos'}`;
        }
        return texto;
      };

      // Preparar dados do cliente
      const nomeCliente = cliente.nome || '[NOME DO CLIENTE]'
      const cpfCliente = cliente.documento || '[CPF/CNPJ]'
      const emailCliente = cliente.email || '[EMAIL]'
      const telefoneCliente = cliente.telefone || '[TELEFONE]'
      const representanteNome = cliente.representante_nome || '[NOME DO REPRESENTANTE]'
      const representanteCpf = cliente.representante_cpf || '[CPF DO REPRESENTANTE]'
      const representanteRg = cliente.representante_rg || '[RG DO REPRESENTANTE]'
      const representanteRua = cliente.representante_rua || '[RUA DO REPRESENTANTE]'
      const representanteBairro = cliente.representante_bairro || '[BAIRRO DO REPRESENTANTE]'
      const representanteMunicipio = cliente.representante_municipio || '[MUNIC√çPIO DO REPRESENTANTE]'
      const representanteCep = cliente.representante_cep || '[CEP DO REPRESENTANTE]'
      const data_pagamento_mensal = cliente.data_pagamento_mensal || '[DATA DE PAGAMENTO MENSAL]'
      
      const enderecoCompleto = [
        cliente.cliente_rua,
        cliente.cliente_numero,
        cliente.cliente_bairro,
        cliente.cliente_cidade,
        cliente.cliente_estado
      ].filter(Boolean).join(', ') || '[ENDERE√áO COMPLETO]'

      // Formata√ß√£o robusta dos honor√°rios
      const honorariosRaw = cliente.honorarios ?? 0
      const honorariosNumber = typeof honorariosRaw === 'number' ? honorariosRaw : Number(honorariosRaw) || 0
      const valorReais = honorariosNumber / 100
      const valorFormatado = new Intl.NumberFormat('pt-BR', {
        style: 'currency',
        currency: 'BRL'
      }).format(Number.isFinite(valorReais) ? valorReais : 0)

      // Usa extenso completo (reais e centavos) e evita "undefined"
      const valorExtenso = moedaPorExtenso(Number.isFinite(valorReais) ? valorReais : 0)

      // Exibe apenas o dia do m√™s para o vencimento, padronizado
      const diaPagamento = extractDay(cliente.data_pagamento_mensal)

      // Data atual em UTC como date-only e formato BR consistente
      // Data do contrato (personalizada ou atual)
      const dataDoContrato = dataContrato || nowUTCDateOnly()
      const dataCompleta = formatDateBR(dataDoContrato)

      // T√≠tulo principal
      doc.setFontSize(16)
      doc.setFont('times', 'bold')
      const titulo = 'CONTRATO DE PRESTA√á√ÉO DE SERVI√áOS CONT√ÅBEIS'
      const tituloWidth = doc.getTextWidth(titulo)
      doc.text(titulo, (pageWidth - tituloWidth) / 2, currentY)
      currentY += 15

      // Par√°grafo introdut√≥rio
      doc.setFontSize(11)
      doc.setFont('times', 'normal')
      const paragrafoIntro = `Pelo presente instrumento particular de Contrato de Presta√ß√£o de Servi√ßos Cont√°beis, de um lado ${nomeCliente}, com sede na ${enderecoCompleto}, inscrita no CNPJ sob N¬∞ ${cpfCliente}, doravante denominada CONTRATANTE, neste ato representada por, ${representanteNome}, brasileiro(a), RG ${representanteRg} e CPF ${representanteCpf}, residente e domiciliado(a) na Rua ${representanteRua}, Bairro ${representanteBairro}, Munic√≠pio de ${representanteMunicipio}, CEP ${representanteCep};`
      
      const paragrafoLines = doc.splitTextToSize(paragrafoIntro, contentWidth)
      doc.text(paragrafoLines, margin, currentY)
      currentY += paragrafoLines.length * 5

      doc.setFontSize(11)
      doc.setFont('times', 'normal')
      const paragrafoIntroSegundo = 'E, de outro lado, o profissional da Contabilidade ANDERSON CARDOZO DA SILVA, com escrit√≥rio na Rua DA CARNA√öBA, n¬∫ 356, Cidade de Colombo, Estado do Paran√°, inscrito no CPF n¬∞ 044.879.419-54, registrado no CRC/PR n¬∞ 079908/O-0, Categoria CONTADOR, doravante denominado CONTRATADO, mediante as cl√°usulas e condi√ß√µes seguintes, t√™m entre si, justo e contratado, o seguinte:'

      const paragrafoLinesSegundo = doc.splitTextToSize(paragrafoIntroSegundo, contentWidth)
      doc.text(paragrafoLinesSegundo, margin, currentY)
      currentY += paragrafoLinesSegundo.length * 5 + 5
      

      // CL√ÅUSULA PRIMEIRA
      doc.setFont('times', 'bold')
      doc.text('CL√ÅUSULA PRIMEIRA - OBJETO DO CONTRATO', margin, currentY)
      currentY += 8
      doc.setFont('times', 'normal')
      const clausula1 = 'O profissional contratado obriga-se a prestar servi√ßos profissionais ao contratante, abrangendo as seguintes √°reas:'
      const clausula1Lines = doc.splitTextToSize(clausula1, contentWidth)
      doc.text(clausula1Lines, margin, currentY)
      currentY += clausula1Lines.length * 5 + 5

      const secoes = [
        { titulo: "1. Contabilidade", itens: [
          "  1.1 Elabora√ß√£o da contabilidade de acordo com as Normas Brasileiras de Contabilidade.",
          "  1.2 Emiss√£o de balancetes.",
          "  1.3 Elabora√ß√£o de Balan√ßo Patrimonial e demais Demonstra√ß√µes Cont√°beis obrigat√≥rias."
        ]},
        { titulo: "2. Obriga√ß√µes Fiscais", itens: [
          "  2.1 Orienta√ß√£o e controle de aplica√ß√£o dos dispositivos legais vigentes, sejam federais, estaduais ou municipais.",
          "  2.2 Elabora√ß√£o dos registros fiscais obrigat√≥rios, eletr√¥nicos ou n√£o, perante os √≥rg√£os municipais, estaduais e federais, bem como as demais obriga√ß√µes que se fizerem necess√°rias.",
          "  2.3 Atendimento √†s demais exig√™ncias previstas na legisla√ß√£o, bem como aos eventuais procedimentos fiscais."
        ]},
        { titulo: "3. Obriga√ß√µes Trabalhistas - Folha de Pagamento", itens: [
          "  3.1 Para os registros de empregados ser√° acrescido ao Honor√°rio Cont√°bil conforme a demanda e necessidades deste Servi√ßo, sendo livre entre as partes no acerto de valores adicionais aos honor√°rios cont√°beis, ou j√° estabelecidos em clausulas especificas de contrato.",
          "  3.2 Registros de empregados e servi√ßos correlatos.",
          "  3.3 Elabora√ß√£o da folha de pagamento dos empregados e de pr√≥-labore, bem como das guias de recolhimento dos encargos sociais e tributos afins.",
          "  3.4 Elabora√ß√£o, orienta√ß√£o e controle da aplica√ß√£o dos preceitos da Consolida√ß√£o das Leis do Trabalho, bem como daqueles atinentes √† Previd√™ncia Social e de outros aplic√°veis √†s rela√ß√µes de trabalho mantidas pela contratante."
        ]},
        { titulo: "4. Servi√ßos Societ√°rios", itens: [
          "  4.1 Poder√° a Contratada Cobrar os valores sobres os Servi√ßos de (Altera√ß√µes Contratuais, como Baixa, abertura de Filiais, Renova√ß√£o de Alvar√° e Corpo de Bombeiros, Meio Ambiente, Vil√¢ncia Sanit√°ria, Anvisa, Pedido de Parcelamento, Registro de Marcas e Patentes, Pedido de Cadastro de Substituto Tribut√°rio, e demais Servi√ßos n√£o abrangidos por obrigatoriedade Cont√°bil, ser√£o cobrados como valores adicionais aos servi√ßos Cont√°beis, por se tratar de produtos correlacionados a √°reas cont√°beis.",
          "  4.2 Poder√° a Contratada Realizar a Cobran√ßa sobre Servi√ßos de Credenciamento da ANTT.",
          "  4.3 Poder√° a Contratada Realizar a Cobran√ßa sobre os Servi√ßos de Gerenciamento Administrativo."
        ]}
      ];

      for (const secao of secoes) {
        doc.setFont("times", "bold");
        doc.text(secao.titulo, margin, currentY);
        currentY += 6;
        doc.setFont("times", "normal");

        for (const item of secao.itens) {
          const itemLines = doc.splitTextToSize(item, contentWidth);
          doc.text(itemLines, margin, currentY);
          currentY += itemLines.length * 5;
        }
        currentY += 5;
      } 

      // CL√ÅUSULA SEGUNDA
      doc.setFont('times', 'bold')
      doc.text('CL√ÅUSULA SEGUNDA - RESPONSABILIDADE T√âCNICA', margin, currentY)
      currentY += 8
      doc.setFont('times', 'normal')
      const clausula2 = `O contratado assume inteira responsabilidade pelos servi√ßos t√©cnicos a que se obrigou, assim como pelas orienta√ß√µes que prestar.`
      const clausula2Lines = doc.splitTextToSize(clausula2, contentWidth)
      doc.text(clausula2Lines, margin, currentY)
      currentY += clausula2Lines.length * 5 + 5

      // Verificar se precisa de nova p√°gina
      if (currentY > pageHeight - 80) {
        doc.addPage()
        currentY = margin
      }

      // CL√ÅUSULA TERCEIRA
      doc.setFont('times', 'bold')
      doc.text('CL√ÅUSULA TERCEIRA - OBRIGA√á√ïES DO CONTRATANTE', margin, currentY)
      currentY += 8
      doc.setFont('times', 'normal')
      const clausula3 = 'O(A) contratante se obriga a preparar, mensalmente, toda a documenta√ß√£o fisco cont√°bil e de pessoal, que dever√° ser disponibilizada ao contratado(a) em tempo h√°bil, conforme cronograma pactuado entre as partes, a fim de que possa executar seus servi√ßos na conformidade com o citado neste instrumento.'
      const clausula3Lines = doc.splitTextToSize(clausula3, contentWidth)
      doc.text(clausula3Lines, margin, currentY)
      currentY += clausula3Lines.length * 5 + 5

      const paragrafo = [
        { titulo: " Par√°grafo Primeiro.", itens: [
          "   Responsabilizar-se-√° o(a) contratado(a) por todos os documentos a ele(a) entregue pelo(a) contratante, enquanto permanecerem sob sua guarda para a consecu√ß√£o dos servi√ßos pactuados, salvo comprovados casos fortuitos e motivos de for√ßa maior."
        ]},
        { titulo: " Par√°grafo Segundo.", itens: [
          "   O(A) Contratante tem ci√™ncia da Lei 9.613/98, alterada pela Lei 12.683/2012, especificamente no que trata da lavagem de dinheiro, regulamentada pela Resolu√ß√£o CFC n.¬∫ 1.345/13 do Conselho Federal de Contabilidade."
        ]}
      ];

      for (const secao of paragrafo) {
        doc.setFont("times", "bold");
        doc.text(secao.titulo, margin, currentY);
        currentY += 6;
        doc.setFont("times", "normal");

        for (const item of secao.itens) {
          const itemLines = doc.splitTextToSize(item, contentWidth);
          doc.text(itemLines, margin, currentY);
          currentY += itemLines.length * 5;
        }
        currentY += 5;
      } 

      // CL√ÅUSULA QUARTA
      doc.setFont('times', 'bold')
      doc.text('CL√ÅUSULA QUARTA - CARTA DE RESPONSABILIDADE', margin, currentY)
      currentY += 8
      doc.setFont('times', 'normal')
      const clausula4 = 'O(A) contratante(a) se obriga, antes do encerramento do exerc√≠cio social, a fornecer ao contratado(a) a Carta de Responsabilidade da Administra√ß√£o.'
      const clausula4Lines = doc.splitTextToSize(clausula4, contentWidth)
      doc.text(clausula4Lines, margin, currentY)
      currentY += clausula4Lines.length * 5 + 5

      // Verificar se precisa de nova p√°gina
      if (currentY > pageHeight - 80) {
        doc.addPage()
        currentY = margin
      }

      // CL√ÅUSULA QUINTA
      doc.setFont('times', 'bold')
      doc.text('CL√ÅUSULA QUINTA', margin, currentY)
      currentY += 8
      doc.setFont('times', 'normal')
      const clausula5 = 'As orienta√ß√µes dadas pelo(a) contratado(a) dever√£o ser seguidas pela contratante, eximindo-se o(a) primeiro(a) das consequ√™ncias da n√£o observ√¢ncia do seu cumprimento.'
      const clausula5Lines = doc.splitTextToSize(clausula5, contentWidth)
      doc.text(clausula5Lines, margin, currentY)
      currentY += clausula5Lines.length * 5 + 5

      // CL√ÅUSULA SEXTA
      doc.setFont('times', 'bold')
      doc.text('CL√ÅUSULA SEXTA', margin, currentY)
      currentY += 8
      doc.setFont('times', 'normal')
      const clausula6 = 'O(A) contratado(a) se obriga a entregar ao contratante, mediante protocolo, com tempo h√°bil, os balancetes, o Balan√ßo Patrimonial e as demais demonstra√ß√µes cont√°beis, documentos necess√°rios para que este efetue os devidos pagamentos e recolhimentos obrigat√≥rios, bem como comprovante de entrega das obriga√ß√µes acess√≥rias.'
      const clausula6Lines = doc.splitTextToSize(clausula6, contentWidth)
      doc.text(clausula6Lines, margin, currentY)
      currentY += clausula6Lines.length * 5 + 5

      const paragrafoUnico = [
        { titulo: " Par√°grafo √önico.", itens: [
          "   As multas decorrentes da entrega fora do prazo contratado das obriga√ß√µes previstas no caput deste artigo, ou que forem decorrentes da imperfei√ß√£o ou inexecu√ß√£o dos servi√ßos por parte do(a) contratado(a), ser√£o de sua responsabilidade."
        ]}
      ];

      for (const secao of paragrafoUnico) {
        doc.setFont("times", "bold");
        doc.text(secao.titulo, margin, currentY);
        currentY += 6;
        doc.setFont("times", "normal");

        for (const item of secao.itens) {
          const itemLines = doc.splitTextToSize(item, contentWidth);
          doc.text(itemLines, margin, currentY);
          currentY += itemLines.length * 5;
        }
        currentY += 5;
      } 

      // CL√ÅUSULA S√âTIMA
      doc.setFont('times', 'bold')
      doc.text('CL√ÅUSULA S√âTIMA - HONOR√ÅRIOS', margin, currentY)
      currentY += 8
      doc.setFont('times', 'normal')
      const clausula7 = `O contratante pagar√° ao contratado pelos servi√ßos prestados os honor√°rios mensais de ${valorFormatado} (${valorExtenso}), venc√≠veis todo dia ${diaPagamento} de cada m√™s, mediante PIX 47.308.673/0001-77.`
      const clausula7Lines = doc.splitTextToSize(clausula7, contentWidth)
      doc.text(clausula7Lines, margin, currentY)
      currentY += clausula7Lines.length * 5 + 5

      const paragrafoUnico2 = [
        { titulo: " Par√°grafo √önico.", itens: [
          "   Os honor√°rios ser√£o reajustados anualmente em comum acordo entre as partes ou quando houver aumento dos servi√ßos contratados."
        ]}
      ];

      for (const secao of paragrafoUnico2) {
        doc.setFont("times", "bold");
        doc.text(secao.titulo, margin, currentY);
        currentY += 6;
        doc.setFont("times", "normal");

        for (const item of secao.itens) {
          const itemLines = doc.splitTextToSize(item, contentWidth);
          doc.text(itemLines, margin, currentY);
          currentY += itemLines.length * 5;
        }
        currentY += 5;
      } 

      // CL√ÅUSULA OITAVA
      doc.setFont('times', 'bold')
      doc.text('CL√ÅUSULA OITAVA', margin, currentY)
      currentY += 8
      doc.setFont('times', 'normal')
      const clausula8 = 'Todos os servi√ßos extraordin√°rios n√£o contratados que forem necess√°rios ou solicitados pelo contratante ser√£o cobrados √† parte, com pre√ßos previamente convencionados.'
      const clausula8Lines = doc.splitTextToSize(clausula8, contentWidth)
      doc.text(clausula8Lines, margin, currentY)
      currentY += clausula8Lines.length * 5 + 5

      if (currentY > pageHeight - 60) {
        doc.addPage()
        currentY = margin + 5
      }

      // CL√ÅUSULA NONA
      doc.setFont('times', 'bold')
      doc.text('CL√ÅUSULA NONA', margin, currentY)
      currentY += 8
      doc.setFont('times', 'normal')
      const clausula9 = 'No caso de atraso no pagamento dos honor√°rios, incidir√° multa permitida pela lei em vigor, e Persistindo o atraso, por per√≠odo de 3 (tr√™s) meses, o contratado(a) poder√° rescindir o contrato, por motivo justificado, eximindo-se de qualquer responsabilidade a partir da data da rescis√£o.'
      const clausula9Lines = doc.splitTextToSize(clausula9, contentWidth)
      doc.text(clausula9Lines, margin, currentY)
      currentY += clausula9Lines.length * 5 + 5

      // CL√ÅUSULA D√âCIMA
      doc.setFont('times', 'bold')
      doc.text('CL√ÅUSULA D√âCIMA', margin, currentY)
      currentY += 8
      doc.setFont('times', 'normal')
      const clausula10 = 'Este instrumento √© feito por tempo indeterminado, podendo ser rescindido em qualquer √©poca, por qualquer uma das partes, mediante Aviso Pr√©vio de (30) dias, por escrito.'
      const clausula10Lines = doc.splitTextToSize(clausula10, contentWidth)
      doc.text(clausula10Lines, margin, currentY)
      currentY += clausula10Lines.length * 5 + 5

      const paragrafo2 = [
        { titulo: " Par√°grafo Primeiro.", itens: [
          "   A parte que n√£o comunicar por escrito a inten√ß√£o de rescindir o contrato ou efetu√°-la de forma sum√°ria fica obrigada ao pagamento de multa compensat√≥ria no valor de uma parcela mensal dos honor√°rios vigentes √† √©poca."
        ]},
        { titulo: " Par√°grafo Segundo.", itens: [
          "   O rompimento do v√≠nculo contratual obriga as partes √† celebra√ß√£o de distrato com a especifica√ß√£o da cessa√ß√£o das responsabilidades dos contratantes."
        ]},
        { titulo: " Par√°grafo Terceiro.", itens: [
          "   O(A) contratado(a) obriga-se a entregar os documentos, Livros Cont√°beis e Fiscais e/ou arquivos eletr√¥nicos ao contratante ou a outro profissional da Contabilidade por ele(a) indicado(a), ap√≥s a assinatura do distrato entre as partes."
        ]}
      ];

      for (const secao of paragrafo2) {
        doc.setFont("times", "bold");
        doc.text(secao.titulo, margin, currentY);
        currentY += 6;
        doc.setFont("times", "normal");

        for (const item of secao.itens) {
          const itemLines = doc.splitTextToSize(item, contentWidth);
          doc.text(itemLines, margin, currentY);
          currentY += itemLines.length * 5;
        }
        currentY += 5;
      } 

      // CL√ÅUSULA D√âCIMA PRIMEIRA
      doc.setFont('times', 'bold')
      doc.text('CL√ÅUSULA D√âCIMA PRIMEIRA', margin, currentY)
      currentY += 8
      doc.setFont('times', 'normal')
      const clausula11 = 'Os casos omissos ser√£o resolvidos de comum acordo.'
      const clausula11Lines = doc.splitTextToSize(clausula11, contentWidth)
      doc.text(clausula11Lines, margin, currentY)
      currentY += clausula11Lines.length * 5 + 5

      const paragrafoUnico3 = [
        { titulo: " Par√°grafo √önico.", itens: [
          "   Em caso de impasse, as partes submeter√£o a solu√ß√£o do conflito o procedimento arbitral nos termos da Lei n¬∫ 9.307/96."
        ]}
      ];

      for (const secao of paragrafoUnico3) {
        doc.setFont("times", "bold");
        doc.text(secao.titulo, margin, currentY);
        currentY += 6;
        doc.setFont("times", "normal");

        for (const item of secao.itens) {
          const itemLines = doc.splitTextToSize(item, contentWidth);
          doc.text(itemLines, margin, currentY);
          currentY += itemLines.length * 5;
        }
        currentY += 5;
      } 

      // Par√°grafo final
      const paragrafoFinal = `E, por estarem justos e contratados, firmam o presente instrumento em duas vias de igual teor e forma. `
      const paragrafoFinalLines = doc.splitTextToSize(paragrafoFinal, contentWidth)
      doc.text(paragrafoFinalLines, margin, currentY)
      currentY += paragrafoFinalLines.length * 5 + 20

      // Data e local
      doc.text(`Paran√°, Colombo, ${dataCompleta}.`, margin, currentY)
      currentY += 20

      // Verificar se precisa de nova p√°gina para assinaturas
      if (currentY > pageHeight - 60) {
        doc.addPage()
        currentY = margin + 20
      }

      // Assinaturas
      doc.text('_________________________________', margin, currentY)
      doc.text('_________________________________', margin + 100, currentY)
      currentY += 8
      doc.text('CONTRATANTE', margin + 20, currentY)
      doc.text('CONTRATADO', margin + 120, currentY)
      currentY += 6
      doc.setFontSize(9)
      doc.text(`${nomeCliente}`, margin, currentY)
      doc.text('Anderson Cardozo Acessoria Cont√°bil', margin + 100, currentY)
      currentY += 4
      doc.text(`CNPJ: ${cpfCliente}`, margin, currentY)
      doc.text('CNPJ: 47.308.673/0001-77 - CRC/PR 079908/O-0', margin + 100, currentY)
      currentY += 15

      // Salvar o PDF
      const pdfBuffer = Buffer.from(doc.output('arraybuffer'))
      fs.writeFileSync(filePath, pdfBuffer)

    } catch (error) {
      throw new Error(`Erro ao gerar PDF: ${error}`)
    }
  }
}